\documentclass[12pt]{extarticle}
 
\usepackage[bottom=1cm,right=2cm,left=2cm]{geometry}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{tabularx}
\usepackage{booktabs} 
\usepackage{listings}
\usepackage{xcolor}
\usepackage{geometry}
\usepackage{float}
\usepackage{hyperref}

%Russian-specific packages
%--------------------------------------
\usepackage[T2A,T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage[english,russian]{babel}
%--------------------------------------
\usepackage{amsfonts}       % blackboard math symbols
 
 
\setlength{\topmargin}{-2cm}
 
 
%\usepackage{fullpage}
\renewcommand{\baselinestretch}{2}
\newcommand{\namesigdate}[2][5cm]{%
    \begin{minipage}{#1}
    #2 \vspace{1.5cm}\hrule\smallskip
    \end{minipage}}

\definecolor{codegray}{gray}{0.9}
\definecolor{commentgreen}{rgb}{0,0.6,0}
\definecolor{stringmauve}{rgb}{0.58,0,0.82}

\lstdefinestyle{mystyle}{
    backgroundcolor=\color{codegray},   
    commentstyle=\color{commentgreen},
    keywordstyle=\color{blue},
    numberstyle=\tiny\color{gray},
    stringstyle=\color{stringmauve},
    basicstyle=\ttfamily\footnotesize,
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=4
}

\lstset{style=mystyle, language=Python}

 
\begin{document}
 
\begin{titlepage}
    \begin{center}
        \textbf{Федеральное государственное автономное образовательное учреждение высшего образования «Национальный исследовательский университет «Высшая школа экономики»}\\[1cm]
        \textbf{Московский институт электроники и математики им. А.Н. Тихонова}\\[2cm]

        
        \huge \textbf{Исследование простых чисел в последовательностях Фибоначчи, Трибоначчи, Тетрабоначчи} \\[1cm]
        \large

        \textbf{Студенты:} Волков Е.И. Ермаков Д.С. Хломов Г.К.\\ 
        \textbf{Руководитель Трека:} Коновалова Т.А.\\
        \textbf{Рецензент:} Щур Л.Н. \\[1cm]
    
        \vfill
        \vspace{1cm}
        \textbf{Москва 2025 г}
    \end{center}
\end{titlepage}

\tableofcontents % Содержание
\newpage


\section{Изначальная постановка задачи}

Изучить функцию распределения простых чисел (пи-функцию $\pi(x)$) в последовательностях Фибоначчи и Тетрабоначчи (аналогичная последовательность, где каждый следующий элемент — сумма четырёх предыдущих). Сравнить её с $\pi(x)$ на множестве натуральных чисел.

\vspace{1cm}


\section{Ход работ}

Про пи-функцию натуральных чисел известно довольно много, даже существует ассимптотическая формула $\pi(x) \approx \frac{x}{ln(x)}$.
Про пи-функции в других числовых множествах, таких как числа Фибоначчи и числа Тетрабоначчи известно гораздо меньше, такой формулы как 1 найдено не было. Поэтому будем определять ее чисто экспериментальн.
В данной работе были написаны функции, вычисляющие значение $\pi(x)$ для:
\begin{itemize}
    \item натуральных чисел,
    \item чисел Фибоначчи,
%    \item чисел Трибоначчи,
    \item чисел Тетрабоначчи.
\end{itemize}

\newpage

\section{Приведем код}

\subsection{Функция заполнения массива числами Фибоначчи}
\begin{lstlisting}
def Fib_numbers_fill(supremum, Fib_array):
    if supremum < 0:
        return Fib_array
    elif supremum < 1:
        Fib_array.append(0)
        return Fib_array
    elif supremum < 2:
        Fib_array.extend([0, 1, 1])
        return Fib_array
    else:
        Fib_array.extend([0, 1, 1])
        Fib_num_1, Fib_num_2, Fib_num = 1, 1, 2
        while Fib_num <= supremum:
            Fib_array.append(Fib_num)
            Fib_num_1, Fib_num_2 = Fib_num_2, Fib_num
            Fib_num = Fib_num_1 + Fib_num_2
        return Fib_array
\end{lstlisting}

\subsection{Функция заполнения массива числами Тетрабоначчи}
\begin{lstlisting}
    def Tetrab_num_fill(supremum, Tetrab_arr):

    if supremum < 0:
        return Tetrab_arr
    elif supremum < 1:
        Tetrab_arr.extend([0])
        return Tetrab_arr
    elif supremum < 2:
        Tetrab_arr.extend([0, 0])
        return Tetrab_arr
    elif supremum < 3:
        Tetrab_arr.extend([0, 0, 0])
        return Tetrab_arr

    else:
        # initialize first 4 digits
        Tetrab_arr.extend([0, 0, 0, 1])
        # We set the working variables - the last four numbers
        a, b, c, d = 0, 0, 0, 1
        next_num = a + b + c + d
        
        while next_num <= supremum:
            Tetrab_arr.append(next_num)
            # Moving variables
            a, b, c, d = b, c, d, next_num
            next_num = a + b + c + d
        
        return Tetrab_arr
\end{lstlisting}

\newpage

\subsection{Решето Эратосфена}
\begin{lstlisting}
def sieve_Eratosphene(n):
    sieve = list(range(2, n))
    #print(sieve)
    for i in range(2, int(n**0.5) + 1):
        #print(i)
        if i in sieve:
            for j in range(i * i, n, i):
                if j in sieve:
                    sieve.remove(j)
                #print(j)
    return sieve
\end{lstlisting}

\subsection{Распаралелленное решето Эратосфена}
\begin{lstlisting}
from multiprocessing import Process, Array
def strain(i, n, sieve):
    for j in range(i * i, n, i):
        sieve[j - 2] = False 
        
def sieve_Eratosphene_paralleled(n):
    sieve = Array('b', [True] * (n - 2))  
    p = []
    for i in range(2, int(n**0.5) + 1):
        process = Process(target=strain, args=(i, n, sieve))
        p.append(process)
        process.start()
    for process in p:
        process.join()
    prime_numbers = [i + 2 for i in range(len(sieve)) if sieve[i]]
    return prime_numbers
\end{lstlisting}

\subsection{Функции проверки на простоту и подсчет простых чисел во всех массивах}
\begin{lstlisting}
def is_a_prime_number(number):
    if number <= 1 or not isinstance(number, int):
        return False
    i = 2
    while i * i <= number:
        if number % i == 0:
            return False
        i += 1
    return True

def count_primes(array):
    return sum(1 for x in array if is_a_prime_number(x))

def count_primes_by_sieve_Eratosphene(array):
    sieve = sieve_Eratosphene(max(array) + 1)
    return sum(1 for x in array if x in sieve)

def count_primes_by_sieve_Eratosphene_paralleled(array):
    sieve = sieve_Eratosphene_paralleled(max(array) + 1)
    return sum(1 for x in array if x in sieve)
\end{lstlisting}

\setlength{\parindent}{0pt}
В последнем блоке(3.5) мы использовали разные методы проверки на простоту чисел из последовательности: простой перебор делителей, решето Эратосфена и решето Эратосфена, реализованное параллельным алгоритмом.
%где Fib_numbers_fill(x, Fib_numbers) определяется 

\vspace{1cm}

\section{Реализация пи-функций}
\subsection{Пи-функция, реализованная простым перебором делителей}
\begin{lstlisting}
def Pi_func_Fib(x):
    Fib_numbers = []
    Fib_numbers = Fib_numbers_fill(x, Fib_numbers)
    pi_F = count_primes(Fib_numbers)
    return pi_F
\end{lstlisting}

\vspace{1cm}

\subsection{Пи-функция, реализованная с решетом Эратосфена}
\begin{lstlisting}
def Pi_func_Fib_using_sieve_Eratosphene(x):
    Fib_numbers = []
    Fib_numbers = Fib_numbers_fill(x, Fib_numbers)
    pi_F = count_primes_by_sieve_Eratosphene(Fib_numbers)
    return pi_F
\end{lstlisting}

\vspace{1cm}

\subsection{Пи-функция, реализованная с Распаралелленным решетом Эратосфена}
\begin{lstlisting}
def Pi_func_Fib_using_sieve_Eratosphene_paralleled(x):
    Fib_numbers = []
    Fib_numbers = Fib_numbers_fill(x, Fib_numbers)
    pi_F = count_primes_by_sieve_Eratosphene_paralleled(Fib_numbers)
    return pi_F
\end{lstlisting}

\setlength{\parindent}{0pt}
С помощью этих функций построены графики, иллюстрирующие различия между распределениями простых чисел в перечисленных последовательностях.


\section{Графики}
\subsection{Пи функция для простого перебора делителей}
\begin{figure}[H]
    \centering
    \includegraphics[height=7cm]{Пи-функция, реализованная с использованием простого перебора делителей.png}
    \caption{Пи-функция, реализованная с использованием простого перебора делителей}
    \label{fig:pi_naive}
\end{figure}

\subsection{Пи-функция с решетом Эратосфена}
\begin{figure}[H]
    \centering
    \includegraphics[height=7cm]{Пи-функция, реализованная с использованием простого перебора делителей.png}
    \caption{Пи-функция, построенная с использованием решета Эратосфена}
    \label{fig:pi_erathosthenes}
\end{figure}

\subsection{Пи-функция с параллельным решетом Эратосфена}
\begin{figure}[H]
    \centering
    \includegraphics[height=7cm]{Пи-функция, реализованная с использованием простого перебора делителей.png}
    \caption{Пи-функция, построенная с использованием параллельного решета Эратосфена}
    \label{fig:pi_parallel}
\end{figure}

Все 3 метода дали одинаковые результаты, в чем можно убедиться, просмотрев графики~\ref{fig:pi_naive}, \ref{fig:pi_erathosthenes}, \ref{fig:pi_parallel}, полученные с помощью этих алгоритмов.

\vspace{0.5cm}

\newpage

\section{Таблица простых чисел в определенном диапазоне}

\subsection{Алгоритм подсчета простых чисел в промежутках}
\begin{lstlisting}
    
x = range(1, 10**deg_max, 10**deg_max // 10)
y = [Pi_func(i) / i for i in x]
y_Fib = [Pi_func_Fib(i) / i for i in x]
y_Tetr = [Pi_func_Tetr(i) / i for i in x]
    
data = {
    "the boundary of the range": x,
    "the proportion of prime numbers": y,
    "the proportion of Fibonacci primes": y_Fib,
    "the proportion of Fibonacci primes": y_Tetr
}

table = pd.DataFrame(data)
table = table.to_latex()
print(table)

\end{lstlisting}
\vspace{1cm}
\setlength{\parindent}{0pt}
При помощи этой функции можно легко посчитать процент простых чисел в числовом диапозоне в последовательности натуральных чисел, фибоначчиевых чисел и чисел Тетрабоначчи.

\newpage

\subsection{Таблица}
{\centering \Large \bfseries ТАБЛИЦА ПРОСТЫХ ЧИСЕЛ\par}

\begin{center}
\renewcommand{\arraystretch}{1.1}
\begin{tabularx}{\textwidth}{l|X|X|X|X}
\toprule
№ & Граница диапазона &  Доля простых чисел &  Доля простых чисел Тетрабоначчи &  Доля простых чисел Фибоначчи \\
\midrule
0 & 1 & 0.000000 & 0.000000 & 0.000000 \\
1 & 101 & 0.257426 & 0.019802 & 0.049505 \\
2 & 201 & 0.228856 & 0.009950 & 0.024876 \\
3 & 301 & 0.205980 & 0.006645 & 0.019934 \\
4 & 401 & 0.197007 & 0.007481 & 0.014963 \\
5 & 501 & 0.189621 & 0.005988 & 0.011976 \\
6 & 601 & 0.183028 & 0.004992 & 0.009983 \\
7 & 701 & 0.179743 & 0.004280 & 0.008559 \\
8 & 801 & 0.173533 & 0.004994 & 0.007491 \\
9 & 901 & 0.170921 & 0.004440 & 0.006659 \\
\bottomrule
\end{tabularx}
\end{center}

\vspace{1cm}
\setlength{\parindent}{0pt}
Данная таблица иллюстрирует долю простых чисел в некотором числовом диапазоне для наших последовательностей.


\newpage

\section{Графики производительности}

Давайте сравним эффективность наших методов.\\
Будем строить зависмость времени исполнения программы от супремума. Для большей содержательности графиков оси будут прологарифмированы.

\vspace{1cm}

\begin{figure}[H]
    \centering
    \includegraphics[height=7cm]{Общие вычисления(2).png}
    \caption{Общие вычисления}
    \label{fig:general_performance}
\end{figure}



\vspace{1cm}

Как видно из графика \ref{fig:general_performance}, производительность распараллеленного решета Эратосфена постепенно догоняет производительность обычного решета Эратосфена, хотя на маленьких значениях работает хуже из-за слишком длительного создания потоков. 


\vspace{1cm}
Простой перебор делителей показывает наилучший результат, более того, его результативность не портится с увеличением вычислений.


\newpage
Однако можно заметить, что вычисления связанные с расчетом пи-функции натуральных чисел отличаются от вычислений связанных с расчетом пи-функции Фибоначчиевых чисел, а также чисел Тетрабоначчи тем, что при вычислении пи-функции Фибоначчиевых и тетрабоначчиевых чисел происходит очень мало проверок на простоту числа (так как Фибоначчиевых чисел очень мало, а Тетрабоначчиевых еще меньше), поэтому использовать в этих вычислениях решето Эратосфена, которое само по себе долго считается, но ускоряет дальнейшую проверку простых чисел, неэффективно. А при вычислении пи-функции натуральных чисел, происходит намного больше проверок на простоту и в этом случае использование решета Эратосфена может дать преимущесвтво на больших вычислениях.


\vspace{1cm}
Давайте попробуем построить соответствующую зависимость отдельно для вычисления пи-функции натуральных чисел и вычисления пи-функции Фибоначчиевых и Тетрабоначчиевых чисел.


\newpage

\subsection{Построим зависимость для Фибоначчиевых чисел}


\begin{figure}[H]
    \centering
    \includegraphics[height=7cm]{(А)Производительность для Фибоначчиевых чисел.png}
    \caption{Производительность для Фибоначчиевых чисел}
    \label{fig:performance of fib_1}
\end{figure}


\begin{figure}[H]
    \centering
    \includegraphics[height=7cm]{(Б)Производительность для Фибоначчиевых чисел.png}
    \caption{Производительность для Фибоначчиевых чисел}
    \label{fig:performance of fib_2}
\end{figure}

Из графиков \ref{fig:performance of fib_1} и \ref{fig:performance of fib_2} мы видим, что при расчете пи-функции Фибоначчиевых чисел, из трех алгоритмов, наилучшие результаты дает простой перебор делителей, причем с увеличением супремума, разница увеличивается.

\vspace{1cm}


\subsection{Построим зависимость для последовательности Тетрабоначчи}

\begin{figure}[H]
    \centering
    \includegraphics[height=7cm]{(А)Производительность для Тетрабоначчи.png} % - сюда вставить производительность точками
    \caption{Производительность для чисел Тетрабоначчи}
    \label{fig:performance of tetr_1}
\end{figure}


\begin{figure}[H]
    \centering
    \includegraphics[height=7cm]{(Б)Производительность для Тетрабоначчи.png} % - сюда вставить производительноть графиком
    \caption{Производительность для чисел Тетрабоначчи}
    \label{fig:performance of tetr_2}
\end{figure}

\setlength{\parindent}{0pt}

Из графиков \ref{fig:performance of tetr_1} и \ref{fig:performance of tetr_2} мы видим, что при расчете пи-функции чисел Тетрабоначчи, из трех алгоритмов, аналогично с числами Фибоначчи наилучшие результаты дает простой перебор делителей, и с увеличением супремума разница тоже увеличивается.

\vspace{1cm}
\setlength{\parindent}{0pt}
\subsection{Построим зависимость производительности для последовательности натуральных чисел}


Зависисмость времени построения от степени супремума отдельно для натуральных чисел:

\vspace{1cm}

\begin{figure}[H]
    \centering
    \includegraphics[height=7cm]{(A)Производительность для натуральных чисел.png}
    \caption{Производительность отдельно для натуральных чисел}
    \label{fig:performance of natural_1}
\end{figure}


\begin{figure}[H]
    \centering
    \includegraphics[height=7cm]{(Б)Производительность для натуральных чисел.png}
    \caption{Производительность отдельно для натуральных чисел}
    \label{fig:performance of natural_2}
\end{figure}

\newpage

\setlength{\parindent}{0pt}
Из графиков \ref{fig:performance of natural_1} и \ref{fig:performance of natural_2} видим, что при расчете пи-функции натуральных чисел, простой перебор делителей дает всё еще лучший результат, но разница в производительностях не такая большая, даже, возможно, на больших числах, алгоритмы, использующие решето Эратосфена, будут давать лучший результат.


\section{Выводы}
Этот эффект возникает по видимому из-за того, что при расчете пи-функции натуральных чисел приходится перебирать очень большое количество делителей. Поэтому алгоритм, в котором тратится большое колличество времени для вычисления решета Эратосфена, но затем проверка каждого числа на простоту осуществляется за константное время, является более целесообразным. Таким образом, для маленьньких чисел, стоит выбирать алгоритм, использующий перебор делителей, а для достаточно больших - решето Эратосфена.  

\newpage

\bibliographystyle{unsrt}
\bibliography{literature}

\end{document}

